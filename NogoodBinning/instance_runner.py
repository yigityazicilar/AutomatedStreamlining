import os
import subprocess
import argparse
from typing import List

def find_essence_file(problem_directory: str) -> str:
    # Find the first *.essence file in the problem directory
    for file in os.listdir(f"EssenceCatalog/problems/{problem_directory}"):
        if file.endswith(".essence"):
            return file
    raise FileNotFoundError("Essence file not found in the specified problem directory")

def get_param_files(problem_directory: str) -> List[str]:
    # Filter the directory to only contain *.param files
    param_dir = f"EssenceCatalog/problems/{problem_directory}/params"
    return [f for f in os.listdir(param_dir) if f.endswith(".param")]

def run_conjure_model(problem: str, essence_file: str, param: str, seed: str, solver="cadical", limit_time=5400):
    essence_base = os.path.splitext(essence_file)[0]
    essence_full = f"EssenceCatalog/problems/{problem}/{essence_file}"
    param_full = f"EssenceCatalog/problems/{problem}/params/{param}"
    eprime_src = f"problems/{problem}/model000001.eprime"  # Default name generated by conjure

    param_base = os.path.splitext(os.path.basename(param))[0]

    target_dir = f"problems/{problem}/Results/{param_base}/{seed}"
    learnt_file = os.path.join(target_dir, f"{param_base}.learnt")
    finds_file = os.path.join(target_dir, f"{param_base}.finds")
    aux_file = os.path.join(target_dir, f"{param_base}.aux")
    os.makedirs(target_dir, exist_ok=True)

    savilerow_options = f"-timelimit {limit_time} -O2 -finds-to-json -out-finds /shared/{finds_file} -out-aux /shared/{aux_file}"
    solver_options = f"-t {limit_time} --seed={seed} --output-learnts --learnt-file /shared/{learnt_file}"

    # Create directories
    os.makedirs(f"slurm/sh/{problem}", exist_ok=True)
    os.makedirs(f"slurm/stderror/{problem}", exist_ok=True)
    os.makedirs(f"slurm/stdout/{problem}", exist_ok=True)

    current_dir = os.getcwd()
    slurm_file_base = f"{essence_base}_{param_base}_{seed}"
    slurm_file = f"slurm/sh/{problem}/{slurm_file_base}.sh"
    error_file = f"{current_dir}/slurm/stderror/{problem}/{slurm_file_base}.error"
    out_file = f"{current_dir}/slurm/stdout/{problem}/{slurm_file_base}task.output"

    with open(slurm_file, 'w') as f:
        f.write(f"""#!/bin/bash
#SBATCH --job-name={essence_base}_{param_base}_{seed}
#SBATCH -e {error_file}
#SBATCH -o {out_file}
#SBATCH --cpus-per-task=2
#SBATCH --mem=16GB
#SBATCH --time=03:05:00

docker run --rm \\
    --hostname=$(hostname) \\
    --network=none \\
    -v "$PWD:/shared:z" \\
    "conjure-dump-nogoods" \\
    conjure model -q af -a af -o /shared/problems/{problem} /shared/{essence_full} && \\
    conjure solve --use-existing-models=/shared/{eprime_src} /shared/{essence_full} /shared/{param_full} -o /shared/{target_dir} \\
        --copy-solutions=off \\
        --log-level LogNone \\
        --savilerow-options "{savilerow_options}" \\
        --solver {solver} \\
        --solver-options "{solver_options}"

gzip {learnt_file}
gzip {aux_file}
""")
            
def main():
    parser = argparse.ArgumentParser(description="Run an Essence problem with a given parameter file and seed")
    parser.add_argument("-p", "--problem", required=True, help="The name of the problem directory")
    parser.add_argument("-s", "--seeds", nargs="+", required=True, help="The seed to run the problem with")
    args = parser.parse_args()

    essence_file = find_essence_file(args.problem)
    param_files = get_param_files(args.problem)

    for param in param_files:
        for seed in args.seeds:
            run_conjure_model(args.problem, essence_file, param, seed)
            
if __name__ == "__main__":
    main()